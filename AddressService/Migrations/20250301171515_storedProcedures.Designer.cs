// <auto-generated />
using System;
using AddressService.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AddressService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250301171515_storedProcedures")]
    partial class storedProcedures
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("AddressService.DataLayer.ApartamentNumberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ApartamentNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("BuildingNumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingNumberId");

                    b.ToTable("ApartamentNumbers");
                });

            modelBuilder.Entity("AddressService.DataLayer.BuildingNumberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("HouseNumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HouseNumberId");

                    b.ToTable("BuildingNumbers");
                });

            modelBuilder.Entity("AddressService.DataLayer.CountriyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AddressService.DataLayer.DistrictEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("AddressService.DataLayer.HouseNumberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StreetId");

                    b.ToTable("HouseNumbers");
                });

            modelBuilder.Entity("AddressService.DataLayer.RegionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("RegionStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionStatusId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("AddressService.DataLayer.RegionStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("RegionStatusName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("RegionStatuses");
                });

            modelBuilder.Entity("AddressService.DataLayer.StreetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("StreetTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StreetTypeId");

                    b.HasIndex("TownId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("AddressService.DataLayer.StreetTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("StreetTypeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("StreetTypes");
                });

            modelBuilder.Entity("AddressService.DataLayer.TownEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("TownName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("TownStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("TownStatusId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("AddressService.DataLayer.TownStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("DistrictEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("TownStatusEntityId")
                        .HasColumnType("int");

                    b.Property<string>("TownStatusName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictEntityId");

                    b.HasIndex("TownStatusEntityId");

                    b.ToTable("TownStatuses");
                });

            modelBuilder.Entity("AddressService.DataLayer.ApartamentNumberEntity", b =>
                {
                    b.HasOne("AddressService.DataLayer.BuildingNumberEntity", "BuildingNumber")
                        .WithMany("ApartamentNumbers")
                        .HasForeignKey("BuildingNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildingNumber");
                });

            modelBuilder.Entity("AddressService.DataLayer.BuildingNumberEntity", b =>
                {
                    b.HasOne("AddressService.DataLayer.HouseNumberEntity", "HouseNumber")
                        .WithMany("BuildingNumbers")
                        .HasForeignKey("HouseNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HouseNumber");
                });

            modelBuilder.Entity("AddressService.DataLayer.DistrictEntity", b =>
                {
                    b.HasOne("AddressService.DataLayer.RegionEntity", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AddressService.DataLayer.HouseNumberEntity", b =>
                {
                    b.HasOne("AddressService.DataLayer.StreetEntity", "Street")
                        .WithMany("HouseNumbers")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Street");
                });

            modelBuilder.Entity("AddressService.DataLayer.RegionEntity", b =>
                {
                    b.HasOne("AddressService.DataLayer.CountriyEntity", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressService.DataLayer.RegionStatusEntity", "RegionStatus")
                        .WithMany("Regions")
                        .HasForeignKey("RegionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("RegionStatus");
                });

            modelBuilder.Entity("AddressService.DataLayer.StreetEntity", b =>
                {
                    b.HasOne("AddressService.DataLayer.StreetTypeEntity", "StreetType")
                        .WithMany("Streets")
                        .HasForeignKey("StreetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressService.DataLayer.TownEntity", "Town")
                        .WithMany("Streets")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StreetType");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("AddressService.DataLayer.TownEntity", b =>
                {
                    b.HasOne("AddressService.DataLayer.DistrictEntity", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressService.DataLayer.TownStatusEntity", "TownStatus")
                        .WithMany()
                        .HasForeignKey("TownStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("TownStatus");
                });

            modelBuilder.Entity("AddressService.DataLayer.TownStatusEntity", b =>
                {
                    b.HasOne("AddressService.DataLayer.DistrictEntity", null)
                        .WithMany("Towns")
                        .HasForeignKey("DistrictEntityId");

                    b.HasOne("AddressService.DataLayer.TownStatusEntity", null)
                        .WithMany("Towns")
                        .HasForeignKey("TownStatusEntityId");
                });

            modelBuilder.Entity("AddressService.DataLayer.BuildingNumberEntity", b =>
                {
                    b.Navigation("ApartamentNumbers");
                });

            modelBuilder.Entity("AddressService.DataLayer.CountriyEntity", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("AddressService.DataLayer.DistrictEntity", b =>
                {
                    b.Navigation("Towns");
                });

            modelBuilder.Entity("AddressService.DataLayer.HouseNumberEntity", b =>
                {
                    b.Navigation("BuildingNumbers");
                });

            modelBuilder.Entity("AddressService.DataLayer.RegionEntity", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("AddressService.DataLayer.RegionStatusEntity", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("AddressService.DataLayer.StreetEntity", b =>
                {
                    b.Navigation("HouseNumbers");
                });

            modelBuilder.Entity("AddressService.DataLayer.StreetTypeEntity", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("AddressService.DataLayer.TownEntity", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("AddressService.DataLayer.TownStatusEntity", b =>
                {
                    b.Navigation("Towns");
                });
#pragma warning restore 612, 618
        }
    }
}
